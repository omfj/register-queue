/**
 * This file was generated by kysely-codegen.
 * Please do not edit it manually.
 */

import type { ColumnType } from "kysely";

export type FeedbackCategory = "bug" | "feature" | "login" | "other";

export type Generated<T> = T extends ColumnType<infer S, infer I, infer U>
  ? ColumnType<S, I | undefined, U>
  : ColumnType<T, T | undefined, T>;

export type HappeningType = "bedpres" | "event" | "external";

export type Int8 = ColumnType<string, bigint | number | string, bigint | number | string>;

export type Json = JsonValue;

export type JsonArray = JsonValue[];

export type JsonObject = {
  [x: string]: JsonValue | undefined;
};

export type JsonPrimitive = boolean | number | string | null;

export type JsonValue = JsonArray | JsonObject | JsonPrimitive;

export type QuestionType = "checkbox" | "radio" | "text" | "textarea";

export type RegistrationStatus = "pending" | "registered" | "removed" | "unregistered" | "waiting";

export type Timestamp = ColumnType<Date, Date | string, Date | string>;

export type UserType = "alum" | "company" | "guest" | "student";

export interface AccessRequest {
  createdAt: Generated<Timestamp>;
  email: string;
  id: string;
  reason: string;
}

export interface Account {
  accessToken: string | null;
  expiresAt: number | null;
  idToken: string | null;
  provider: string;
  providerAccountId: string;
  refreshToken: string | null;
  scope: string | null;
  sessionState: string | null;
  tokenType: string | null;
  type: string;
  userId: string;
}

export interface Answer {
  answer: Json | null;
  happeningId: string;
  questionId: string;
  userId: string;
}

export interface Comment {
  content: string;
  createdAt: Generated<Timestamp>;
  id: string;
  parentCommentId: string | null;
  postId: string;
  updatedAt: Timestamp;
  userId: string | null;
}

export interface Degree {
  id: string;
  name: string;
}

export interface DrizzleDrizzleMigrations {
  createdAt: Int8 | null;
  hash: string;
  id: Generated<number>;
}

export interface Group {
  id: string;
  name: string;
}

export interface Happening {
  date: Timestamp | null;
  id: string;
  registrationEnd: Timestamp | null;
  registrationGroups: Json | null;
  registrationStart: Timestamp | null;
  registrationStartGroups: Timestamp | null;
  slug: string;
  title: string;
  type: Generated<HappeningType>;
}

export interface HappeningsToGroups {
  groupId: string;
  happeningId: string;
}

export interface Kv {
  key: string;
  ttl: Generated<Timestamp | null>;
  value: Json | null;
}

export interface Question {
  happeningId: string;
  id: string;
  isSensitive: Generated<boolean>;
  options: Json | null;
  required: Generated<boolean>;
  title: string;
  type: Generated<QuestionType>;
}

export interface Reaction {
  createdAt: Generated<Timestamp>;
  emojiId: number;
  reactToKey: string;
  userId: string;
}

export interface Registration {
  changedAt: Timestamp | null;
  changedBy: string | null;
  createdAt: Generated<Timestamp>;
  happeningId: string;
  prevStatus: RegistrationStatus | null;
  status: Generated<RegistrationStatus>;
  unregisterReason: string | null;
  userId: string;
}

export interface Session {
  expires: Timestamp;
  sessionToken: string;
  userId: string;
}

export interface ShoppingListItem {
  createdAt: Generated<Timestamp>;
  id: Generated<string>;
  name: string;
  userId: string;
}

export interface SiteFeedback {
  category: FeedbackCategory;
  createdAt: Generated<Timestamp>;
  email: string | null;
  id: string;
  isRead: Generated<boolean>;
  message: string;
  name: string | null;
}

export interface SpotRange {
  happeningId: string;
  id: string;
  maxYear: number;
  minYear: number;
  spots: number;
}

export interface Strike {
  id: Generated<number>;
  isDeleted: Generated<boolean>;
  strikeInfoId: string;
  userId: string;
}

export interface StrikeInfo {
  createdAt: Generated<Timestamp>;
  happeningId: string;
  id: Generated<string>;
  issuerId: string;
  reason: string;
}

export interface User {
  alternativeEmail: string | null;
  bannedFromStrike: number | null;
  createdAt: Timestamp | null;
  degreeId: string | null;
  email: string;
  emailVerified: Timestamp | null;
  hasReadTerms: Generated<boolean>;
  id: string;
  image: string | null;
  isBanned: Generated<boolean>;
  lastSignInAt: Timestamp | null;
  name: string | null;
  type: Generated<UserType>;
  updatedAt: Timestamp | null;
  year: number | null;
}

export interface UsersToGroups {
  groupId: string;
  isLeader: Generated<boolean>;
  userId: string;
}

export interface UsersToShoppingListItems {
  createdAt: Generated<Timestamp>;
  itemId: string;
  userId: string;
}

export interface VerificationToken {
  expires: Timestamp;
  identifier: string;
  token: string;
}

export interface Whitelist {
  email: string;
  expiresAt: Timestamp;
  reason: string;
}

export interface DB {
  accessRequest: AccessRequest;
  account: Account;
  answer: Answer;
  comment: Comment;
  degree: Degree;
  "drizzle.DrizzleMigrations": DrizzleDrizzleMigrations;
  group: Group;
  happening: Happening;
  happeningsToGroups: HappeningsToGroups;
  kv: Kv;
  question: Question;
  reaction: Reaction;
  registration: Registration;
  session: Session;
  shoppingListItem: ShoppingListItem;
  siteFeedback: SiteFeedback;
  spotRange: SpotRange;
  strike: Strike;
  strikeInfo: StrikeInfo;
  user: User;
  usersToGroups: UsersToGroups;
  usersToShoppingListItems: UsersToShoppingListItems;
  verificationToken: VerificationToken;
  whitelist: Whitelist;
}
